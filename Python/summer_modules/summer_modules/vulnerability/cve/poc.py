import httpx
from summer_modules.logger import init_and_get_logger
from . import cve_logger, CVE_INFO_BASE_DIR, CURRENT_DIR
from summer_modules.utils import write_dict_to_json_file
import json

def get_poc_links(cve_id, enable_local_search=True):
    cve_info_cve_dir = CVE_INFO_BASE_DIR / cve_id
    cve_info_cve_dir.mkdir(parents=True, exist_ok=True)
    cve_info_cve_filepath = cve_info_cve_dir / f"{cve_id}_poc.json"
    if enable_local_search and cve_info_cve_filepath.exists():
        cve_logger.debug(f"本地已存在 POC 信息: {cve_id}，从本地读取")
        with open(cve_info_cve_filepath, "r") as f:
            poc_links_response_json = json.load(f)
        return _get_poc_links_list_from_exploit_db_json_response(
            poc_links_response_json
        )
    # Exploit Database 网站
    # exploit_db_url = f"https://www.exploit-db.com/search?q={cve_id}"
    exploit_db_url = f"https://www.exploit-db.com/search?cve={cve_id}&draw=1&columns%5B0%5D%5Bdata%5D=date_published&columns%5B0%5D%5Bname%5D=date_published&columns%5B0%5D%5Bsearchable%5D=true&columns%5B0%5D%5Borderable%5D=true&columns%5B0%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B0%5D%5Bsearch%5D%5Bregex%5D=false&columns%5B1%5D%5Bdata%5D=download&columns%5B1%5D%5Bname%5D=download&columns%5B1%5D%5Bsearchable%5D=false&columns%5B1%5D%5Borderable%5D=false&columns%5B1%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B1%5D%5Bsearch%5D%5Bregex%5D=false&columns%5B2%5D%5Bdata%5D=application_md5&columns%5B2%5D%5Bname%5D=application_md5&columns%5B2%5D%5Bsearchable%5D=true&columns%5B2%5D%5Borderable%5D=false&columns%5B2%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B2%5D%5Bsearch%5D%5Bregex%5D=false&columns%5B3%5D%5Bdata%5D=verified&columns%5B3%5D%5Bname%5D=verified&columns%5B3%5D%5Bsearchable%5D=true&columns%5B3%5D%5Borderable%5D=false&columns%5B3%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B3%5D%5Bsearch%5D%5Bregex%5D=false&columns%5B4%5D%5Bdata%5D=description&columns%5B4"

    headers = {
        "authority": "www.exploit-db.com",
        "sec-ch-ua-platform": "\"macOS\"",
        "x-requested-with": "XMLHttpRequest",
        "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36 Edg/131.0.0.0",
        "accept": "application/json, text/javascript, */*; q=0.01",
        "sec-ch-ua": "\"Microsoft Edge\";v=\"131\", \"Chromium\";v=\"131\", \"Not_A Brand\";v=\"24\"",
        "dnt": "1",
        "sec-ch-ua-mobile": "?0",
        "sec-fetch-site": "same-origin",
        "sec-fetch-mode": "cors",
        "sec-fetch-dest": "empty",
        "referer": "https://www.exploit-db.com/search?cve=CVE-2021-44228",
        "accept-encoding": "gzip, deflate, br, zstd",
        "accept-language": "zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6",
        "cookie": "CookieConsent={stamp:'-1',necessary:true,preferences:true,statistics:true,marketing:true,method:'implied',ver:1,utc:1737097157541,region:'HK'}; _ga=GA1.3.819382434.1737097158; _gid=GA1.3.1230805548.1737097158; _ga_N0K6XSDCRJ=GS1.3.1737097159.1.1.1737097215.4.0.0; XSRF-TOKEN=eyJpdiI6IkY5cDN3UU9WSWFCcmhFbjdVNFdTUEE9PSIsInZhbHVlIjoiRXZKK2RLN255Rlc2VnVJMXhYRW9BTmdhQjZKTFExQm5YdGc5WTNXNzlFZTBOeWFjUjBpM3FEdTAreTJGRGdYeSIsIm1hYyI6IjYxNzBjNGQ3MzQ1MTE2NmQ5MDZjOGU4ZjczOGVkMzRmODViMmM0N2RhYTVmZjM2ZjVmZThhN2VkNmVjM2VkNzAifQ==; exploit_database_session=eyJpdiI6ImJYQXYyYVBiK2dYZ2RDR3VTNFQ4Mnc9PSIsInZhbHVlIjoiemVTRDBtNlQ2cUFXNmphVmJ0NXJGcWQwVEtOZXRXZHlTOGtKSHh4V1FIY0RFNlNkalQ2Y0ZXTkZBc1VZV0Y5diIsIm1hYyI6ImRlMmMzZjA2MjY4MzI4ZWU4Y2Y0NWQzNGE1NjIyZjJlZjhhOGRkNjM2Y2JhOTliZTdlOTFhOGViOTUzYjQxODcifQ==; _gat=1",
        "priority": "u=1, i"
    }

    with httpx.Client(verify=False, timeout=20) as client:
        # 获取 Exploit Database 网站页面
        try:
            response = client.get(exploit_db_url, headers=headers)
            if response.status_code == 200:
                response_data_json = response.json()
                write_dict_to_json_file(response_data_json, cve_info_cve_filepath)
                return _get_poc_links_list_from_exploit_db_json_response(response_data_json)
            else:
                cve_logger.error(f"访问 Exploit Database 失败，状态码：{response.status_code}")
                return None
        except httpx.RequestError as e:
            cve_logger.error(f"请求 Exploit Database 时发生错误: {e}")
            return None

def _get_poc_links_list_from_exploit_db_json_response(response_data_json):
    poc_url_list = []
    for item in response_data_json["data"]:
        item_poc_url = f"https://www.exploit-db.com/exploits/{item['id']}"
        poc_url_list.append(item_poc_url)
    cve_logger.info(f"获取到 POC 链接: {poc_url_list}")
    return poc_url_list

def test_get_poc():
    cve_id = "CVE-2021-40444"
    poc_links = get_poc_links(cve_id,enable_local_search=True)
    cve_logger.info(f"获取到的 POC 链接为: {poc_links}")